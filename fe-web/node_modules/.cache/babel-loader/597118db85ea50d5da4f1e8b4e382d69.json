{"ast":null,"code":"var _jsxFileName = \"/Users/astridvarga/Documents/dev/test/src/components/Search.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport TextField from '@material-ui/core/TextField';\nimport Autocomplete, { createFilterOptions } from '@material-ui/lab/Autocomplete';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst useStyles = makeStyles(theme => ({\n  input: {\n    background: 'rgb(255, 255, 255)'\n  }\n}));\nconst filter = createFilterOptions();\nexport default function FreeSoloCreateOption(props) {\n  _s();\n\n  const classes = useStyles();\n  const [value, setValue] = React.useState(null);\n  return /*#__PURE__*/_jsxDEV(Autocomplete, {\n    value: value,\n    onChange: (event, newValue) => {\n      if (typeof newValue === 'string') {\n        setValue({\n          title: newValue\n        });\n      } else if (newValue && newValue.inputValue) {\n        // Create a new value from the user input\n        setValue({\n          title: newValue.inputValue\n        });\n      } else {\n        setValue(newValue);\n      }\n    },\n    filterOptions: (options, params) => {\n      const filtered = filter(options, params); // Suggest the creation of a new value\n\n      if (params.inputValue !== '') {\n        filtered.push({\n          inputValue: params.inputValue,\n          title: `Add \"${params.inputValue}\"`\n        });\n      }\n\n      return filtered;\n    },\n    selectOnFocus: true,\n    clearOnBlur: true,\n    handleHomeEndKeys: true,\n    id: \"free-solo-with-text-demo\",\n    options: top100Films,\n    getOptionLabel: option => {\n      // Value selected with enter, right from the input\n      if (typeof option === 'string') {\n        return option;\n      } // Add \"xxx\" option created dynamically\n\n\n      if (option.inputValue) {\n        return option.inputValue;\n      } // Regular option\n\n\n      return option.title;\n    },\n    renderOption: option => option.title,\n    style: {\n      width: 700\n    },\n    freeSolo: true,\n    renderInput: params => /*#__PURE__*/_jsxDEV(TextField, { ...params,\n      InputProps: {\n        className: classes.input\n      },\n      label: \"Search...\",\n      variant: \"outlined\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 17\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 21,\n    columnNumber: 9\n  }, this);\n} // Top 100 films as rated by IMDb users. http://www.imdb.com/chart/top\n\n_s(FreeSoloCreateOption, \"BjGbUSBtAHuvLa3ng4eKFwU22lQ=\", false, function () {\n  return [useStyles];\n});\n\n_c = FreeSoloCreateOption;\nconst top100Films = [{\n  title: 'The Shawshank Redemption',\n  year: 1994\n}, {\n  title: 'The Godfather',\n  year: 1972\n}, {\n  title: 'The Godfather: Part II',\n  year: 1974\n}, {\n  title: 'The Dark Knight',\n  year: 2008\n}, {\n  title: '12 Angry Men',\n  year: 1957\n}, {\n  title: \"Schindler's List\",\n  year: 1993\n}, {\n  title: 'Pulp Fiction',\n  year: 1994\n}, {\n  title: 'The Lord of the Rings: The Return of the King',\n  year: 2003\n}, {\n  title: 'The Good, the Bad and the Ugly',\n  year: 1966\n}, {\n  title: 'Fight Club',\n  year: 1999\n}, {\n  title: 'The Lord of the Rings: The Fellowship of the Ring',\n  year: 2001\n}, {\n  title: 'Star Wars: Episode V - The Empire Strikes Back',\n  year: 1980\n}, {\n  title: 'Forrest Gump',\n  year: 1994\n}, {\n  title: 'Inception',\n  year: 2010\n}, {\n  title: 'The Lord of the Rings: The Two Towers',\n  year: 2002\n}, {\n  title: \"One Flew Over the Cuckoo's Nest\",\n  year: 1975\n}, {\n  title: 'Goodfellas',\n  year: 1990\n}, {\n  title: 'The Matrix',\n  year: 1999\n}, {\n  title: 'Seven Samurai',\n  year: 1954\n}, {\n  title: 'Star Wars: Episode IV - A New Hope',\n  year: 1977\n}, {\n  title: 'City of God',\n  year: 2002\n}, {\n  title: 'Se7en',\n  year: 1995\n}, {\n  title: 'The Silence of the Lambs',\n  year: 1991\n}, {\n  title: \"It's a Wonderful Life\",\n  year: 1946\n}, {\n  title: 'Life Is Beautiful',\n  year: 1997\n}, {\n  title: 'The Usual Suspects',\n  year: 1995\n}, {\n  title: 'Léon: The Professional',\n  year: 1994\n}, {\n  title: 'Spirited Away',\n  year: 2001\n}, {\n  title: 'Saving Private Ryan',\n  year: 1998\n}, {\n  title: 'Once Upon a Time in the West',\n  year: 1968\n}, {\n  title: 'American History X',\n  year: 1998\n}, {\n  title: 'Interstellar',\n  year: 2014\n}, {\n  title: 'Casablanca',\n  year: 1942\n}, {\n  title: 'City Lights',\n  year: 1931\n}, {\n  title: 'Psycho',\n  year: 1960\n}, {\n  title: 'The Green Mile',\n  year: 1999\n}, {\n  title: 'The Intouchables',\n  year: 2011\n}, {\n  title: 'Modern Times',\n  year: 1936\n}, {\n  title: 'Raiders of the Lost Ark',\n  year: 1981\n}, {\n  title: 'Rear Window',\n  year: 1954\n}, {\n  title: 'The Pianist',\n  year: 2002\n}, {\n  title: 'The Departed',\n  year: 2006\n}, {\n  title: 'Terminator 2: Judgment Day',\n  year: 1991\n}, {\n  title: 'Back to the Future',\n  year: 1985\n}, {\n  title: 'Whiplash',\n  year: 2014\n}, {\n  title: 'Gladiator',\n  year: 2000\n}, {\n  title: 'Memento',\n  year: 2000\n}, {\n  title: 'The Prestige',\n  year: 2006\n}, {\n  title: 'The Lion King',\n  year: 1994\n}, {\n  title: 'Apocalypse Now',\n  year: 1979\n}, {\n  title: 'Alien',\n  year: 1979\n}, {\n  title: 'Sunset Boulevard',\n  year: 1950\n}, {\n  title: 'Dr. Strangelove or: How I Learned to Stop Worrying and Love the Bomb',\n  year: 1964\n}, {\n  title: 'The Great Dictator',\n  year: 1940\n}, {\n  title: 'Cinema Paradiso',\n  year: 1988\n}, {\n  title: 'The Lives of Others',\n  year: 2006\n}, {\n  title: 'Grave of the Fireflies',\n  year: 1988\n}, {\n  title: 'Paths of Glory',\n  year: 1957\n}, {\n  title: 'Django Unchained',\n  year: 2012\n}, {\n  title: 'The Shining',\n  year: 1980\n}, {\n  title: 'WALL·E',\n  year: 2008\n}, {\n  title: 'American Beauty',\n  year: 1999\n}, {\n  title: 'The Dark Knight Rises',\n  year: 2012\n}, {\n  title: 'Princess Mononoke',\n  year: 1997\n}, {\n  title: 'Aliens',\n  year: 1986\n}, {\n  title: 'Oldboy',\n  year: 2003\n}, {\n  title: 'Once Upon a Time in America',\n  year: 1984\n}, {\n  title: 'Witness for the Prosecution',\n  year: 1957\n}, {\n  title: 'Das Boot',\n  year: 1981\n}, {\n  title: 'Citizen Kane',\n  year: 1941\n}, {\n  title: 'North by Northwest',\n  year: 1959\n}, {\n  title: 'Vertigo',\n  year: 1958\n}, {\n  title: 'Star Wars: Episode VI - Return of the Jedi',\n  year: 1983\n}, {\n  title: 'Reservoir Dogs',\n  year: 1992\n}, {\n  title: 'Braveheart',\n  year: 1995\n}, {\n  title: 'M',\n  year: 1931\n}, {\n  title: 'Requiem for a Dream',\n  year: 2000\n}, {\n  title: 'Amélie',\n  year: 2001\n}, {\n  title: 'A Clockwork Orange',\n  year: 1971\n}, {\n  title: 'Like Stars on Earth',\n  year: 2007\n}, {\n  title: 'Taxi Driver',\n  year: 1976\n}, {\n  title: 'Lawrence of Arabia',\n  year: 1962\n}, {\n  title: 'Double Indemnity',\n  year: 1944\n}, {\n  title: 'Eternal Sunshine of the Spotless Mind',\n  year: 2004\n}, {\n  title: 'Amadeus',\n  year: 1984\n}, {\n  title: 'To Kill a Mockingbird',\n  year: 1962\n}, {\n  title: 'Toy Story 3',\n  year: 2010\n}, {\n  title: 'Logan',\n  year: 2017\n}, {\n  title: 'Full Metal Jacket',\n  year: 1987\n}, {\n  title: 'Dangal',\n  year: 2016\n}, {\n  title: 'The Sting',\n  year: 1973\n}, {\n  title: '2001: A Space Odyssey',\n  year: 1968\n}, {\n  title: \"Singin' in the Rain\",\n  year: 1952\n}, {\n  title: 'Toy Story',\n  year: 1995\n}, {\n  title: 'Bicycle Thieves',\n  year: 1948\n}, {\n  title: 'The Kid',\n  year: 1921\n}, {\n  title: 'Inglourious Basterds',\n  year: 2009\n}, {\n  title: 'Snatch',\n  year: 2000\n}, {\n  title: '3 Idiots',\n  year: 2009\n}, {\n  title: 'Monty Python and the Holy Grail',\n  year: 1975\n}];\n\nvar _c;\n\n$RefreshReg$(_c, \"FreeSoloCreateOption\");","map":{"version":3,"sources":["/Users/astridvarga/Documents/dev/test/src/components/Search.js"],"names":["React","TextField","Autocomplete","createFilterOptions","makeStyles","useStyles","theme","input","background","filter","FreeSoloCreateOption","props","classes","value","setValue","useState","event","newValue","title","inputValue","options","params","filtered","push","top100Films","option","width","className","year"],"mappings":"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","sourcesContent":["import React from 'react'\nimport TextField from '@material-ui/core/TextField'\nimport Autocomplete, {\n    createFilterOptions,\n} from '@material-ui/lab/Autocomplete'\nimport { makeStyles } from '@material-ui/core/styles'\n\nconst useStyles = makeStyles((theme) => ({\n    input: {\n        background: 'rgb(255, 255, 255)',\n    },\n}))\n\nconst filter = createFilterOptions()\n\nexport default function FreeSoloCreateOption(props) {\n    const classes = useStyles()\n    const [value, setValue] = React.useState(null)\n\n    return (\n        <Autocomplete\n            value={value}\n            onChange={(event, newValue) => {\n                if (typeof newValue === 'string') {\n                    setValue({\n                        title: newValue,\n                    })\n                } else if (newValue && newValue.inputValue) {\n                    // Create a new value from the user input\n                    setValue({\n                        title: newValue.inputValue,\n                    })\n                } else {\n                    setValue(newValue)\n                }\n            }}\n            filterOptions={(options, params) => {\n                const filtered = filter(options, params)\n\n                // Suggest the creation of a new value\n                if (params.inputValue !== '') {\n                    filtered.push({\n                        inputValue: params.inputValue,\n                        title: `Add \"${params.inputValue}\"`,\n                    })\n                }\n\n                return filtered\n            }}\n            selectOnFocus\n            clearOnBlur\n            handleHomeEndKeys\n            id=\"free-solo-with-text-demo\"\n            options={top100Films}\n            getOptionLabel={(option) => {\n                // Value selected with enter, right from the input\n                if (typeof option === 'string') {\n                    return option\n                }\n                // Add \"xxx\" option created dynamically\n                if (option.inputValue) {\n                    return option.inputValue\n                }\n                // Regular option\n                return option.title\n            }}\n            renderOption={(option) => option.title}\n            style={{ width: 700 }}\n            freeSolo\n            renderInput={(params) => (\n                <TextField\n                    {...params}\n                    InputProps={{ className: classes.input }}\n                    label=\"Search...\"\n                    variant=\"outlined\"\n                />\n            )}\n        />\n    )\n}\n\n// Top 100 films as rated by IMDb users. http://www.imdb.com/chart/top\nconst top100Films = [\n    { title: 'The Shawshank Redemption', year: 1994 },\n    { title: 'The Godfather', year: 1972 },\n    { title: 'The Godfather: Part II', year: 1974 },\n    { title: 'The Dark Knight', year: 2008 },\n    { title: '12 Angry Men', year: 1957 },\n    { title: \"Schindler's List\", year: 1993 },\n    { title: 'Pulp Fiction', year: 1994 },\n    { title: 'The Lord of the Rings: The Return of the King', year: 2003 },\n    { title: 'The Good, the Bad and the Ugly', year: 1966 },\n    { title: 'Fight Club', year: 1999 },\n    { title: 'The Lord of the Rings: The Fellowship of the Ring', year: 2001 },\n    { title: 'Star Wars: Episode V - The Empire Strikes Back', year: 1980 },\n    { title: 'Forrest Gump', year: 1994 },\n    { title: 'Inception', year: 2010 },\n    { title: 'The Lord of the Rings: The Two Towers', year: 2002 },\n    { title: \"One Flew Over the Cuckoo's Nest\", year: 1975 },\n    { title: 'Goodfellas', year: 1990 },\n    { title: 'The Matrix', year: 1999 },\n    { title: 'Seven Samurai', year: 1954 },\n    { title: 'Star Wars: Episode IV - A New Hope', year: 1977 },\n    { title: 'City of God', year: 2002 },\n    { title: 'Se7en', year: 1995 },\n    { title: 'The Silence of the Lambs', year: 1991 },\n    { title: \"It's a Wonderful Life\", year: 1946 },\n    { title: 'Life Is Beautiful', year: 1997 },\n    { title: 'The Usual Suspects', year: 1995 },\n    { title: 'Léon: The Professional', year: 1994 },\n    { title: 'Spirited Away', year: 2001 },\n    { title: 'Saving Private Ryan', year: 1998 },\n    { title: 'Once Upon a Time in the West', year: 1968 },\n    { title: 'American History X', year: 1998 },\n    { title: 'Interstellar', year: 2014 },\n    { title: 'Casablanca', year: 1942 },\n    { title: 'City Lights', year: 1931 },\n    { title: 'Psycho', year: 1960 },\n    { title: 'The Green Mile', year: 1999 },\n    { title: 'The Intouchables', year: 2011 },\n    { title: 'Modern Times', year: 1936 },\n    { title: 'Raiders of the Lost Ark', year: 1981 },\n    { title: 'Rear Window', year: 1954 },\n    { title: 'The Pianist', year: 2002 },\n    { title: 'The Departed', year: 2006 },\n    { title: 'Terminator 2: Judgment Day', year: 1991 },\n    { title: 'Back to the Future', year: 1985 },\n    { title: 'Whiplash', year: 2014 },\n    { title: 'Gladiator', year: 2000 },\n    { title: 'Memento', year: 2000 },\n    { title: 'The Prestige', year: 2006 },\n    { title: 'The Lion King', year: 1994 },\n    { title: 'Apocalypse Now', year: 1979 },\n    { title: 'Alien', year: 1979 },\n    { title: 'Sunset Boulevard', year: 1950 },\n    {\n        title: 'Dr. Strangelove or: How I Learned to Stop Worrying and Love the Bomb',\n        year: 1964,\n    },\n    { title: 'The Great Dictator', year: 1940 },\n    { title: 'Cinema Paradiso', year: 1988 },\n    { title: 'The Lives of Others', year: 2006 },\n    { title: 'Grave of the Fireflies', year: 1988 },\n    { title: 'Paths of Glory', year: 1957 },\n    { title: 'Django Unchained', year: 2012 },\n    { title: 'The Shining', year: 1980 },\n    { title: 'WALL·E', year: 2008 },\n    { title: 'American Beauty', year: 1999 },\n    { title: 'The Dark Knight Rises', year: 2012 },\n    { title: 'Princess Mononoke', year: 1997 },\n    { title: 'Aliens', year: 1986 },\n    { title: 'Oldboy', year: 2003 },\n    { title: 'Once Upon a Time in America', year: 1984 },\n    { title: 'Witness for the Prosecution', year: 1957 },\n    { title: 'Das Boot', year: 1981 },\n    { title: 'Citizen Kane', year: 1941 },\n    { title: 'North by Northwest', year: 1959 },\n    { title: 'Vertigo', year: 1958 },\n    { title: 'Star Wars: Episode VI - Return of the Jedi', year: 1983 },\n    { title: 'Reservoir Dogs', year: 1992 },\n    { title: 'Braveheart', year: 1995 },\n    { title: 'M', year: 1931 },\n    { title: 'Requiem for a Dream', year: 2000 },\n    { title: 'Amélie', year: 2001 },\n    { title: 'A Clockwork Orange', year: 1971 },\n    { title: 'Like Stars on Earth', year: 2007 },\n    { title: 'Taxi Driver', year: 1976 },\n    { title: 'Lawrence of Arabia', year: 1962 },\n    { title: 'Double Indemnity', year: 1944 },\n    { title: 'Eternal Sunshine of the Spotless Mind', year: 2004 },\n    { title: 'Amadeus', year: 1984 },\n    { title: 'To Kill a Mockingbird', year: 1962 },\n    { title: 'Toy Story 3', year: 2010 },\n    { title: 'Logan', year: 2017 },\n    { title: 'Full Metal Jacket', year: 1987 },\n    { title: 'Dangal', year: 2016 },\n    { title: 'The Sting', year: 1973 },\n    { title: '2001: A Space Odyssey', year: 1968 },\n    { title: \"Singin' in the Rain\", year: 1952 },\n    { title: 'Toy Story', year: 1995 },\n    { title: 'Bicycle Thieves', year: 1948 },\n    { title: 'The Kid', year: 1921 },\n    { title: 'Inglourious Basterds', year: 2009 },\n    { title: 'Snatch', year: 2000 },\n    { title: '3 Idiots', year: 2009 },\n    { title: 'Monty Python and the Holy Grail', year: 1975 },\n]\n"]},"metadata":{},"sourceType":"module"}